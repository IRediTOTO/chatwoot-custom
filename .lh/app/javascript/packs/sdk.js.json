{
    "sourceFile": "app/javascript/packs/sdk.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1718741052708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718744730722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,5 +204,6 @@\n };\n \n window.chatwootSDK = {\n   run: runSDK,\n+  IFrameHelper,\n };\n"
                }
            ],
            "date": 1718741052708,
            "name": "Commit-0",
            "content": "import Cookies from 'js-cookie';\nimport { IFrameHelper } from '../sdk/IFrameHelper';\nimport {\n  getBubbleView,\n  getDarkMode,\n  getWidgetStyle,\n} from '../sdk/settingsHelper';\nimport {\n  computeHashForUserData,\n  getUserCookieName,\n  hasUserKeys,\n} from '../sdk/cookieHelpers';\nimport {\n  addClasses,\n  removeClasses,\n  restoreWidgetInDOM,\n} from '../sdk/DOMHelpers';\nimport { setCookieWithDomain } from '../sdk/cookieHelpers';\nimport { SDK_SET_BUBBLE_VISIBILITY } from 'shared/constants/sharedFrameEvents';\n\nconst runSDK = async ({ baseUrl, websiteToken }) => {\n  if (window.$chatwoot) {\n    return;\n  }\n\n  if (window.Turbo) {\n    // if this is a Rails Turbo app\n    document.addEventListener('turbo:before-render', event =>\n      restoreWidgetInDOM(event.detail.newBody)\n    );\n  }\n\n  if (window.Turbolinks) {\n    document.addEventListener('turbolinks:before-render', event => {\n      restoreWidgetInDOM(event.data.newBody);\n    });\n  }\n\n  // if this is an astro app\n  document.addEventListener('astro:before-swap', event =>\n    restoreWidgetInDOM(event.newDocument.body)\n  );\n\n  const chatwootSettings = window.chatwootSettings || {};\n  let locale = chatwootSettings.locale;\n  let baseDomain = chatwootSettings.baseDomain;\n\n  if (chatwootSettings.useBrowserLanguage) {\n    locale = window.navigator.language.replace('-', '_');\n  }\n\n  window.$chatwoot = {\n    baseUrl,\n    baseDomain,\n    hasLoaded: false,\n    hideMessageBubble: chatwootSettings.hideMessageBubble || false,\n    isOpen: false,\n    position: chatwootSettings.position === 'left' ? 'left' : 'right',\n    websiteToken,\n    locale,\n    useBrowserLanguage: chatwootSettings.useBrowserLanguage || false,\n    type: getBubbleView(chatwootSettings.type),\n    launcherTitle: chatwootSettings.launcherTitle || '',\n    showPopoutButton: chatwootSettings.showPopoutButton || false,\n    showUnreadMessagesDialog: chatwootSettings.showUnreadMessagesDialog ?? true,\n    widgetStyle: getWidgetStyle(chatwootSettings.widgetStyle) || 'standard',\n    resetTriggered: false,\n    darkMode: getDarkMode(chatwootSettings.darkMode),\n\n    toggle(state) {\n      IFrameHelper.events.toggleBubble(state);\n    },\n\n    toggleBubbleVisibility(visibility) {\n      let widgetElm = document.querySelector('.woot--bubble-holder');\n      let widgetHolder = document.querySelector('.woot-widget-holder');\n      if (visibility === 'hide') {\n        addClasses(widgetHolder, 'woot-widget--without-bubble');\n        addClasses(widgetElm, 'woot-hidden');\n        window.$chatwoot.hideMessageBubble = true;\n      } else if (visibility === 'show') {\n        removeClasses(widgetElm, 'woot-hidden');\n        removeClasses(widgetHolder, 'woot-widget--without-bubble');\n        window.$chatwoot.hideMessageBubble = false;\n      }\n      IFrameHelper.sendMessage(SDK_SET_BUBBLE_VISIBILITY, {\n        hideMessageBubble: window.$chatwoot.hideMessageBubble,\n      });\n    },\n\n    popoutChatWindow() {\n      IFrameHelper.events.popoutChatWindow({\n        baseUrl: window.$chatwoot.baseUrl,\n        websiteToken: window.$chatwoot.websiteToken,\n        locale,\n      });\n    },\n\n    setUser(identifier, user) {\n      if (typeof identifier !== 'string' && typeof identifier !== 'number') {\n        throw new Error('Identifier should be a string or a number');\n      }\n\n      if (!hasUserKeys(user)) {\n        throw new Error(\n          'User object should have one of the keys [avatar_url, email, name]'\n        );\n      }\n\n      const userCookieName = getUserCookieName();\n      const existingCookieValue = Cookies.get(userCookieName);\n      const hashToBeStored = computeHashForUserData({ identifier, user });\n      if (hashToBeStored === existingCookieValue) {\n        return;\n      }\n\n      window.$chatwoot.identifier = identifier;\n      window.$chatwoot.user = user;\n      IFrameHelper.sendMessage('set-user', { identifier, user });\n\n      setCookieWithDomain(userCookieName, hashToBeStored, {\n        baseDomain,\n      });\n    },\n\n    setCustomAttributes(customAttributes = {}) {\n      if (!customAttributes || !Object.keys(customAttributes).length) {\n        throw new Error('Custom attributes should have atleast one key');\n      } else {\n        IFrameHelper.sendMessage('set-custom-attributes', { customAttributes });\n      }\n    },\n\n    deleteCustomAttribute(customAttribute = '') {\n      if (!customAttribute) {\n        throw new Error('Custom attribute is required');\n      } else {\n        IFrameHelper.sendMessage('delete-custom-attribute', {\n          customAttribute,\n        });\n      }\n    },\n\n    setConversationCustomAttributes(customAttributes = {}) {\n      if (!customAttributes || !Object.keys(customAttributes).length) {\n        throw new Error('Custom attributes should have atleast one key');\n      } else {\n        IFrameHelper.sendMessage('set-conversation-custom-attributes', {\n          customAttributes,\n        });\n      }\n    },\n\n    deleteConversationCustomAttribute(customAttribute = '') {\n      if (!customAttribute) {\n        throw new Error('Custom attribute is required');\n      } else {\n        IFrameHelper.sendMessage('delete-conversation-custom-attribute', {\n          customAttribute,\n        });\n      }\n    },\n\n    setLabel(label = '') {\n      IFrameHelper.sendMessage('set-label', { label });\n    },\n\n    removeLabel(label = '') {\n      IFrameHelper.sendMessage('remove-label', { label });\n    },\n\n    setLocale(localeToBeUsed = 'en') {\n      IFrameHelper.sendMessage('set-locale', { locale: localeToBeUsed });\n    },\n\n    setColorScheme(darkMode = 'light') {\n      IFrameHelper.sendMessage('set-color-scheme', {\n        darkMode: getDarkMode(darkMode),\n      });\n    },\n\n    reset() {\n      if (window.$chatwoot.isOpen) {\n        IFrameHelper.events.toggleBubble();\n      }\n\n      Cookies.remove('cw_conversation');\n      Cookies.remove(getUserCookieName());\n\n      const iframe = IFrameHelper.getAppFrame();\n      iframe.src = IFrameHelper.getUrl({\n        baseUrl: window.$chatwoot.baseUrl,\n        websiteToken: window.$chatwoot.websiteToken,\n      });\n\n      window.$chatwoot.resetTriggered = true;\n    },\n  };\n\n  IFrameHelper.createFrame({\n    baseUrl,\n    websiteToken,\n  });\n};\n\nwindow.chatwootSDK = {\n  run: runSDK,\n};\n"
        }
    ]
}