{
  "sourceFile": "app/javascript/sdk/IFrameHelper.js",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 0,
      "patches": [
        {
          "date": 1718737667541,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        }
      ],
      "date": 1718737667541,
      "name": "Commit-0",
      "content": "import Cookies from 'js-cookie';\nimport {\n  addClasses,\n  loadCSS,\n  removeClasses,\n  onLocationChangeListener,\n} from './DOMHelpers';\nimport {\n  body,\n  widgetHolder,\n  createBubbleHolder,\n  createBubbleIcon,\n  bubbleSVG,\n  chatBubble,\n  closeBubble,\n  bubbleHolder,\n  createNotificationBubble,\n  onClickChatBubble,\n  onBubbleClick,\n  setBubbleText,\n  addUnreadClass,\n  removeUnreadClass,\n} from './bubbleHelpers';\nimport { isWidgetColorLighter } from 'shared/helpers/colorHelper';\nimport { dispatchWindowEvent } from 'shared/helpers/CustomEventHelper';\nimport { CHATWOOT_ERROR, CHATWOOT_READY } from '../widget/constants/sdkEvents';\nimport { SET_USER_ERROR } from '../widget/constants/errorTypes';\nimport { getUserCookieName, setCookieWithDomain } from './cookieHelpers';\nimport {\n  getAlertAudio,\n  initOnEvents,\n} from 'shared/helpers/AudioNotificationHelper';\nimport { isFlatWidgetStyle } from './settingsHelper';\nimport { popoutChatWindow } from '../widget/helpers/popoutHelper';\nimport addHours from 'date-fns/addHours';\n\nconst updateAuthCookie = (cookieContent, baseDomain = '') =>\n  setCookieWithDomain('cw_conversation', cookieContent, {\n    baseDomain,\n  });\n\nconst updateCampaignReadStatus = baseDomain => {\n  const expireBy = addHours(new Date(), 1);\n  setCookieWithDomain('cw_snooze_campaigns_till', Number(expireBy), {\n    expires: expireBy,\n    baseDomain,\n  });\n};\n\nexport const IFrameHelper = {\n  getUrl({ baseUrl, websiteToken }) {\n    return `${baseUrl}/widget?website_token=${websiteToken}`;\n  },\n  createFrame: ({ baseUrl, websiteToken }) => {\n    if (IFrameHelper.getAppFrame()) {\n      return;\n    }\n\n    loadCSS();\n    const iframe = document.createElement('iframe');\n    const cwCookie = Cookies.get('cw_conversation');\n    let widgetUrl = IFrameHelper.getUrl({ baseUrl, websiteToken });\n    if (cwCookie) {\n      widgetUrl = `${widgetUrl}&cw_conversation=${cwCookie}`;\n    }\n    iframe.src = widgetUrl;\n    iframe.allow =\n      'camera;microphone;fullscreen;display-capture;picture-in-picture;clipboard-write;';\n    iframe.id = 'live_chat_widget';\n    iframe.style.visibility = 'hidden';\n    iframe.load;\n    let holderClassName = `woot-widget-holder woot--hide woot-elements--${window.$chatwoot.position}`;\n    if (window.$chatwoot.hideMessageBubble) {\n      holderClassName += ` woot-widget--without-bubble`;\n    }\n    if (isFlatWidgetStyle(window.$chatwoot.widgetStyle)) {\n      holderClassName += ` woot-widget-holder--flat`;\n    }\n\n    addClasses(widgetHolder, holderClassName);\n    widgetHolder.id = 'cw-widget-holder';\n    widgetHolder.appendChild(iframe);\n    body.appendChild(widgetHolder);\n    IFrameHelper.initPostMessageCommunication();\n    IFrameHelper.initWindowSizeListener();\n    IFrameHelper.preventDefaultScroll();\n  },\n  getAppFrame: () => document.getElementById('live_chat_widget'),\n  getBubbleHolder: () => document.getElementsByClassName('woot--bubble-holder'),\n  sendMessage: (key, value) => {\n    const element = IFrameHelper.getAppFrame();\n    element.contentWindow.postMessage(\n      `chatwoot-widget:${JSON.stringify({ event: key, ...value })}`,\n      '*'\n    );\n  },\n  initPostMessageCommunication: () => {\n    window.onmessage = e => {\n      if (\n        typeof e.data !== 'string' ||\n        e.data.indexOf('chatwoot-widget:') !== 0\n      ) {\n        return;\n      }\n      const message = JSON.parse(e.data.replace('chatwoot-widget:', ''));\n      if (typeof IFrameHelper.events[message.event] === 'function') {\n        IFrameHelper.events[message.event](message);\n      }\n    };\n  },\n  initWindowSizeListener: () => {\n    window.addEventListener('resize', () => IFrameHelper.toggleCloseButton());\n  },\n  preventDefaultScroll: () => {\n    widgetHolder.addEventListener('wheel', event => {\n      const deltaY = event.deltaY;\n      const contentHeight = widgetHolder.scrollHeight;\n      const visibleHeight = widgetHolder.offsetHeight;\n      const scrollTop = widgetHolder.scrollTop;\n\n      if (\n        (scrollTop === 0 && deltaY < 0) ||\n        (visibleHeight + scrollTop === contentHeight && deltaY > 0)\n      ) {\n        event.preventDefault();\n      }\n    });\n  },\n\n  setFrameHeightToFitContent: (extraHeight, isFixedHeight) => {\n    const iframe = IFrameHelper.getAppFrame();\n    const updatedIframeHeight = isFixedHeight ? `${extraHeight}px` : '100%';\n\n    if (iframe)\n      iframe.setAttribute('style', `height: ${updatedIframeHeight} !important`);\n  },\n\n  setupAudioListeners: () => {\n    const { baseUrl = '' } = window.$chatwoot;\n    getAlertAudio(baseUrl, { type: 'widget', alertTone: 'ding' }).then(() =>\n      initOnEvents.forEach(event => {\n        document.removeEventListener(\n          event,\n          IFrameHelper.setupAudioListeners,\n          false\n        );\n      })\n    );\n  },\n\n  events: {\n    loaded: message => {\n      updateAuthCookie(message.config.authToken, window.$chatwoot.baseDomain);\n      window.$chatwoot.hasLoaded = true;\n      const campaignsSnoozedTill = Cookies.get('cw_snooze_campaigns_till');\n      IFrameHelper.sendMessage('config-set', {\n        locale: window.$chatwoot.locale,\n        position: window.$chatwoot.position,\n        hideMessageBubble: window.$chatwoot.hideMessageBubble,\n        showPopoutButton: window.$chatwoot.showPopoutButton,\n        widgetStyle: window.$chatwoot.widgetStyle,\n        darkMode: window.$chatwoot.darkMode,\n        showUnreadMessagesDialog: window.$chatwoot.showUnreadMessagesDialog,\n        campaignsSnoozedTill,\n      });\n      IFrameHelper.onLoad({\n        widgetColor: message.config.channelConfig.widgetColor,\n      });\n      IFrameHelper.toggleCloseButton();\n\n      if (window.$chatwoot.user) {\n        IFrameHelper.sendMessage('set-user', window.$chatwoot.user);\n      }\n\n      window.playAudioAlert = () => {};\n\n      initOnEvents.forEach(e => {\n        document.addEventListener(e, IFrameHelper.setupAudioListeners, false);\n      });\n\n      if (!window.$chatwoot.resetTriggered) {\n        dispatchWindowEvent({ eventName: CHATWOOT_READY });\n      }\n    },\n    error: ({ errorType, data }) => {\n      dispatchWindowEvent({ eventName: CHATWOOT_ERROR, data: data });\n\n      if (errorType === SET_USER_ERROR) {\n        Cookies.remove(getUserCookieName());\n      }\n    },\n    onEvent({ eventIdentifier: eventName, data }) {\n      dispatchWindowEvent({ eventName, data });\n    },\n    setBubbleLabel(message) {\n      setBubbleText(window.$chatwoot.launcherTitle || message.label);\n    },\n\n    setAuthCookie({ data: { widgetAuthToken } }) {\n      updateAuthCookie(widgetAuthToken, window.$chatwoot.baseDomain);\n    },\n\n    setCampaignReadOn() {\n      updateCampaignReadStatus(window.$chatwoot.baseDomain);\n    },\n\n    toggleBubble: state => {\n      let bubbleState = {};\n      if (state === 'open') {\n        bubbleState.toggleValue = true;\n      } else if (state === 'close') {\n        bubbleState.toggleValue = false;\n      }\n\n      onBubbleClick(bubbleState);\n    },\n\n    popoutChatWindow: ({ baseUrl, websiteToken, locale }) => {\n      const cwCookie = Cookies.get('cw_conversation');\n      window.$chatwoot.toggle('close');\n      popoutChatWindow(baseUrl, websiteToken, locale, cwCookie);\n    },\n\n    closeWindow: () => {\n      onBubbleClick({ toggleValue: false });\n      removeUnreadClass();\n    },\n\n    onBubbleToggle: isOpen => {\n      IFrameHelper.sendMessage('toggle-open', { isOpen });\n      if (isOpen) {\n        IFrameHelper.pushEvent('webwidget.triggered');\n      }\n    },\n    onLocationChange: ({ referrerURL, referrerHost }) => {\n      IFrameHelper.sendMessage('change-url', {\n        referrerURL,\n        referrerHost,\n      });\n    },\n    updateIframeHeight: message => {\n      const { extraHeight = 0, isFixedHeight } = message;\n\n      IFrameHelper.setFrameHeightToFitContent(extraHeight, isFixedHeight);\n    },\n\n    setUnreadMode: () => {\n      addUnreadClass();\n      onBubbleClick({ toggleValue: true });\n    },\n\n    resetUnreadMode: () => removeUnreadClass(),\n    handleNotificationDot: event => {\n      if (window.$chatwoot.hideMessageBubble) {\n        return;\n      }\n\n      const bubbleElement = document.querySelector('.woot-widget-bubble');\n      if (\n        event.unreadMessageCount > 0 &&\n        !bubbleElement.classList.contains('unread-notification')\n      ) {\n        addClasses(bubbleElement, 'unread-notification');\n      } else if (event.unreadMessageCount === 0) {\n        removeClasses(bubbleElement, 'unread-notification');\n      }\n    },\n\n    closeChat: () => {\n      onBubbleClick({ toggleValue: false });\n    },\n\n    playAudio: () => {\n      window.playAudioAlert();\n    },\n  },\n  pushEvent: eventName => {\n    IFrameHelper.sendMessage('push-event', { eventName });\n  },\n\n  onLoad: ({ widgetColor }) => {\n    const iframe = IFrameHelper.getAppFrame();\n    iframe.style.visibility = '';\n    iframe.setAttribute('id', `live_chat_widget`);\n\n    if (IFrameHelper.getBubbleHolder().length) {\n      return;\n    }\n    createBubbleHolder(window.$chatwoot.hideMessageBubble);\n    onLocationChangeListener();\n\n    let className = 'woot-widget-bubble';\n    let closeBtnClassName = `woot-elements--${window.$chatwoot.position} woot-widget-bubble woot--close woot--hide`;\n\n    if (isFlatWidgetStyle(window.$chatwoot.widgetStyle)) {\n      className += ' woot-widget-bubble--flat';\n      closeBtnClassName += ' woot-widget-bubble--flat';\n    }\n\n    if (isWidgetColorLighter(widgetColor)) {\n      className += ' woot-widget-bubble-color--lighter';\n      closeBtnClassName += ' woot-widget-bubble-color--lighter';\n    }\n\n    const chatIcon = createBubbleIcon({\n      className,\n      path: bubbleSVG,\n      target: chatBubble,\n    });\n\n    addClasses(closeBubble, closeBtnClassName);\n\n    chatIcon.style.background = widgetColor;\n    closeBubble.style.background = widgetColor;\n\n    bubbleHolder.appendChild(chatIcon);\n    bubbleHolder.appendChild(closeBubble);\n    bubbleHolder.appendChild(createNotificationBubble());\n    onClickChatBubble();\n  },\n  toggleCloseButton: () => {\n    let isMobile = false;\n    if (window.matchMedia('(max-width: 668px)').matches) {\n      isMobile = true;\n    }\n    IFrameHelper.sendMessage('toggle-close-button', { isMobile });\n  },\n};\n"
    }
  ]
}
