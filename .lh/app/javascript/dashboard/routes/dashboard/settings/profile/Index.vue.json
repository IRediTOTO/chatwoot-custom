{
    "sourceFile": "app/javascript/dashboard/routes/dashboard/settings/profile/Index.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1718744730720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1718744730720,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"grid py-16 px-5 font-inter mx-auto gap-16 sm:max-w-[720px]\">\n    <div class=\"flex flex-col gap-6\">\n      <h2 class=\"text-2xl font-medium text-ash-900\">\n        {{ $t('PROFILE_SETTINGS.TITLE') }}\n      </h2>\n      <user-profile-picture\n        :src=\"avatarUrl\"\n        :name=\"name\"\n        size=\"72px\"\n        @change=\"updateProfilePicture\"\n        @delete=\"deleteProfilePicture\"\n      />\n      <user-basic-details\n        :name=\"name\"\n        :display-name=\"displayName\"\n        :email=\"email\"\n        :email-enabled=\"!globalConfig.disableUserProfileUpdate\"\n        @update-user=\"updateProfile\"\n      />\n    </div>\n\n    <form-section\n      :title=\"$t('PROFILE_SETTINGS.FORM.MESSAGE_SIGNATURE_SECTION.TITLE')\"\n      :description=\"$t('PROFILE_SETTINGS.FORM.MESSAGE_SIGNATURE_SECTION.NOTE')\"\n    >\n      <message-signature\n        :message-signature=\"messageSignature\"\n        @update-signature=\"updateSignature\"\n      />\n    </form-section>\n    <form-section\n      :title=\"$t('PROFILE_SETTINGS.FORM.SEND_MESSAGE.TITLE')\"\n      :description=\"$t('PROFILE_SETTINGS.FORM.SEND_MESSAGE.NOTE')\"\n    >\n      <div\n        class=\"flex flex-col justify-between w-full gap-5 sm:gap-4 sm:flex-row\"\n      >\n        <button\n          v-for=\"hotKey in hotKeys\"\n          :key=\"hotKey.key\"\n          class=\"px-0 reset-base\"\n        >\n          <hot-key-card\n            :key=\"hotKey.title\"\n            :title=\"hotKey.title\"\n            :description=\"hotKey.description\"\n            :light-image=\"hotKey.lightImage\"\n            :dark-image=\"hotKey.darkImage\"\n            :active=\"isEditorHotKeyEnabled(uiSettings, hotKey.key)\"\n            @click=\"toggleHotKey(hotKey.key)\"\n          />\n        </button>\n      </div>\n    </form-section>\n    <form-section :title=\"$t('PROFILE_SETTINGS.FORM.PASSWORD_SECTION.TITLE')\">\n      <change-password v-if=\"!globalConfig.disableUserProfileUpdate\" />\n    </form-section>\n    <form-section\n      :title=\"$t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.TITLE')\"\n      :description=\"\n        $t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.NOTE')\n      \"\n    >\n      <audio-notifications />\n    </form-section>\n    <form-section :title=\"$t('PROFILE_SETTINGS.FORM.NOTIFICATIONS.TITLE')\">\n      <notification-preferences />\n    </form-section>\n    <form-section\n      v-if=\"isSuperAdmin\"\n      :title=\"$t('PROFILE_SETTINGS.FORM.ACCESS_TOKEN.TITLE')\"\n      :description=\"\n        useInstallationName(\n          $t('PROFILE_SETTINGS.FORM.ACCESS_TOKEN.NOTE'),\n          globalConfig.installationName\n        )\n      \"\n    >\n      <access-token :value=\"currentUser.access_token\" @on-copy=\"onCopyToken\" />\n    </form-section>\n  </div>\n</template>\n<script>\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport uiSettingsMixin, {\n  isEditorHotKeyEnabled,\n} from 'dashboard/mixins/uiSettings';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { mapGetters } from 'vuex';\nimport { clearCookiesOnLogout } from 'dashboard/store/utils/api.js';\nimport { copyTextToClipboard } from 'shared/helpers/clipboard';\n\nimport UserProfilePicture from './UserProfilePicture.vue';\nimport UserBasicDetails from './UserBasicDetails.vue';\nimport MessageSignature from './MessageSignature.vue';\nimport HotKeyCard from './HotKeyCard.vue';\nimport ChangePassword from './ChangePassword.vue';\nimport NotificationPreferences from './NotificationPreferences.vue';\nimport AudioNotifications from './AudioNotifications.vue';\nimport FormSection from 'dashboard/components/FormSection.vue';\nimport AccessToken from './AccessToken.vue';\nimport adminMixin from 'dashboard/mixins/isAdmin';\n\nexport default {\n  components: {\n    MessageSignature,\n    FormSection,\n    UserProfilePicture,\n    UserBasicDetails,\n    HotKeyCard,\n    ChangePassword,\n    NotificationPreferences,\n    AudioNotifications,\n    AccessToken,\n  },\n  mixins: [alertMixin, globalConfigMixin, uiSettingsMixin, adminMixin],\n  data() {\n    return {\n      avatarFile: '',\n      avatarUrl: '',\n      name: '',\n      displayName: '',\n      email: '',\n      messageSignature: '',\n      hotKeys: [\n        {\n          key: 'enter',\n          title: this.$t(\n            'PROFILE_SETTINGS.FORM.SEND_MESSAGE.CARD.ENTER_KEY.HEADING'\n          ),\n          description: this.$t(\n            'PROFILE_SETTINGS.FORM.SEND_MESSAGE.CARD.ENTER_KEY.CONTENT'\n          ),\n          lightImage: '/assets/images/dashboard/profile/hot-key-enter.svg',\n          darkImage: '/assets/images/dashboard/profile/hot-key-enter-dark.svg',\n        },\n        {\n          key: 'cmd_enter',\n          title: this.$t(\n            'PROFILE_SETTINGS.FORM.SEND_MESSAGE.CARD.CMD_ENTER_KEY.HEADING'\n          ),\n          description: this.$t(\n            'PROFILE_SETTINGS.FORM.SEND_MESSAGE.CARD.CMD_ENTER_KEY.CONTENT'\n          ),\n          lightImage: '/assets/images/dashboard/profile/hot-key-ctrl-enter.svg',\n          darkImage:\n            '/assets/images/dashboard/profile/hot-key-ctrl-enter-dark.svg',\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      currentUser: 'getCurrentUser',\n      currentUserId: 'getCurrentUserID',\n      globalConfig: 'globalConfig/get',\n    }),\n  },\n  mounted() {\n    if (this.currentUserId) {\n      this.initializeUser();\n    }\n  },\n  methods: {\n    initializeUser() {\n      this.name = this.currentUser.name;\n      this.email = this.currentUser.email;\n      this.avatarUrl = this.currentUser.avatar_url;\n      this.displayName = this.currentUser.display_name;\n      this.messageSignature = this.currentUser.message_signature;\n    },\n    isEditorHotKeyEnabled,\n    async dispatchUpdate(payload, successMessage, errorMessage) {\n      let alertMessage = '';\n      try {\n        await this.$store.dispatch('updateProfile', payload);\n        alertMessage = successMessage;\n\n        return true; // return the value so that the status can be known\n      } catch (error) {\n        alertMessage = error?.response?.data?.error\n          ? error.response.data.error\n          : errorMessage;\n\n        return false; // return the value so that the status can be known\n      } finally {\n        this.showAlert(alertMessage);\n      }\n    },\n    async updateProfile(userAttributes) {\n      const { name, email, displayName } = userAttributes;\n      const hasEmailChanged = this.currentUser.email !== email;\n      this.name = name || this.name;\n      this.email = email || this.email;\n      this.displayName = displayName || this.displayName;\n\n      const updatePayload = {\n        name: this.name,\n        email: this.email,\n        displayName: this.displayName,\n        avatar: this.avatarFile,\n      };\n\n      const success = await this.dispatchUpdate(\n        updatePayload,\n        hasEmailChanged\n          ? this.$t('PROFILE_SETTINGS.AFTER_EMAIL_CHANGED')\n          : this.$t('PROFILE_SETTINGS.UPDATE_SUCCESS'),\n        this.$t('RESET_PASSWORD.API.ERROR_MESSAGE')\n      );\n\n      if (hasEmailChanged && success) clearCookiesOnLogout();\n    },\n    async updateSignature(signature) {\n      const payload = { message_signature: signature };\n      let successMessage = this.$t(\n        'PROFILE_SETTINGS.FORM.MESSAGE_SIGNATURE_SECTION.API_SUCCESS'\n      );\n      let errorMessage = this.$t(\n        'PROFILE_SETTINGS.FORM.MESSAGE_SIGNATURE_SECTION.API_ERROR'\n      );\n\n      await this.dispatchUpdate(payload, successMessage, errorMessage);\n    },\n    updateProfilePicture({ file, url }) {\n      this.avatarFile = file;\n      this.avatarUrl = url;\n    },\n    async deleteProfilePicture() {\n      try {\n        await this.$store.dispatch('deleteAvatar');\n        this.avatarUrl = '';\n        this.avatarFile = '';\n        this.showAlert(this.$t('PROFILE_SETTINGS.AVATAR_DELETE_SUCCESS'));\n      } catch (error) {\n        this.showAlert(this.$t('PROFILE_SETTINGS.AVATAR_DELETE_FAILED'));\n      }\n    },\n    toggleHotKey(key) {\n      this.hotKeys = this.hotKeys.map(hotKey =>\n        hotKey.key === key ? { ...hotKey, active: !hotKey.active } : hotKey\n      );\n      this.updateUISettings({ editor_message_key: key });\n      this.showAlert(\n        this.$t('PROFILE_SETTINGS.FORM.SEND_MESSAGE.UPDATE_SUCCESS')\n      );\n    },\n    async onCopyToken(value) {\n      await copyTextToClipboard(value);\n      this.showAlert(this.$t('COMPONENTS.CODE.COPY_SUCCESSFUL'));\n    },\n  },\n};\n</script>\n"
        }
    ]
}